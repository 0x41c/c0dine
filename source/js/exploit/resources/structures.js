/**
 * Structures to provide a simple interface for C++ classes.
 */

// TODO: Inline struct/enum support

// Very very very bad :)
function __name_function(name, func) {
  Object.defineProperty(func, "name", { value: name });
}

function Structure(pointer, fields) {
  return {
    pointer,
    fields,
  };
}

function Field(name, size, type, offset = null) {
  return {
    name,
    size,
    type,
    offset,
  };
}

const _structureProxyHandler = {
  get: (target, property, receiver) => {
    let pointer = target.pointer;
    let metadata = globalThis[target.name];
    let prefix = `${target.name}(${pointer}):`;

    printf(`${prefix}`);
    printf(`  - size: ${metadata.size}`);
    printf(`  - totalSize: ${metadata.totalSize}`);

    if (!Object.keys(metadata.fields).includes(property))
      throw `${target.name}(${pointer}) Unknown property: ${property}`;

    let field = metadata.fields[property];

    switch (field.type) {
      default:
        throw `${prefix} Unknown type (${field.type})`;
    }
  },
};

function _getStructureProxy(pointer, name) {
  return new Proxy({ pointer, name }, _structureProxyHandler);
}

function newStructure(name, fields, inherits = "") {
  let baseOffset = 0;
  let ancestor = null;
  if (inherits != "" && globalThis != null) {
    ancestor = globalThis[inherits];
    baseOffset = ancestor.totalSize;
  }

  let offset = baseOffset;

  let fieldMap = {};
  for (let field of fields) {
    field.offset = offset;
    fieldMap[field.name] = field;
    offset += field.size;
  }

  if (ancestor != null)
    fieldMap = {
      ...ancestor.fields,
      ...fieldMap,
    };

  // Can't be a class because we need to get our dynamic name
  const _construct = function (pointer) {
    return _getStructureProxy(pointer, arguments.callee.name);
  };

  _construct.size = offset - baseOffset;
  _construct.baseOffset = baseOffset;
  _construct.totalSize = offset;
  _construct.fields = fieldMap;

  __name_function(name, _construct);

  globalThis[name] = _construct;
}

newStructure("JSCell", [
  Field("m_structureID", 32, "Data"),
  Field("m_indexingTypeAndMisc", 8, "Data"),
  Field("m_type", 8, "Data"),
  Field("m_flags", 8, "Data"),
  Field("m_cellState", 8, "Data"),
]);

newStructure("JSObject", [Field("m_butterfly", 64, "Pointer")], "JSCell");

newStructure("JSCallee", [Field("m_scope", 64, "Pointer")], "JSObject");

newStructure(
  "JSFunction",
  [Field("m_executableOrRareData", 64, "Pointer")],
  "JSCallee"
);

newStructure(
  "ExecutableBase",
  [
    // TODO: JitCode
    Field("m_jitCodeForCall", 64, "Pointer"),
    Field("m_jitCodeForConstruct", 64, "Pointer"),
    Field("m_jitCodeForCallWithArityCheck", 64, "Pointer"),
    Field("m_jitCodeForConstructWithArityCheck", 64, "Pointer"),
  ],
  "JSCell"
);
